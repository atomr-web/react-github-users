{"version":3,"sources":["components/Form.js","components/User.js","components/Users.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getUsers","Grid","container","spacing","alignItems","item","xs","sm","FormControl","fullWidth","InputLabel","htmlFor","Input","id","required","autoFocus","Button","color","variant","type","size","disableElevation","useStyles","makeStyles","avatar","width","height","marginBottom","name","User","classes","md","lg","Card","className","CardContent","Avatar","alt","login","src","avatarUrl","Typography","noWrap","Link","href","html_url","target","rel","Users","error","users","isLoading","direction","justify","message","LinearProgress","length","map","i","key","avatar_url","component","Footer","Container","App","state","bind","e","preventDefault","this","setState","fetch","querySelector","value","then","res","json","result","items","maxWidth","align","inputText","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"0XAIO,SAASA,EAAKC,GACjB,OACI,0BAAMC,SAAUD,EAAME,UAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,YACnC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,CAAaC,WAAW,GACpB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,QACA,kBAACC,EAAA,EAAD,CACIC,GAAG,WACHC,UAAU,EACVC,WAAW,MAIvB,kBAACd,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACS,EAAA,EAAD,CACIC,MAAM,UACNC,QAAQ,YACRC,KAAK,SACLC,KAAK,QACLC,kBAAgB,GAEhB,kBAAC,IAAD,MAPJ,a,qEChBdC,EAAYC,YAAW,CACzBC,OAAQ,CACJC,MAAO,GACPC,OAAQ,GACRC,aAAc,IAElBC,KAAM,CACFD,aAAc,MAIf,SAASE,EAAK/B,GACjB,IAAMgC,EAAUR,IAEhB,OACI,kBAACrB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIyB,GAAI,EAAGC,GAAI,GAC1B,kBAACC,EAAA,EAAD,CAAMC,UAAU,qBACZ,kBAACC,EAAA,EAAD,CAAaD,UAAU,sBACnB,kBAACE,EAAA,EAAD,CACIF,UAAWJ,EAAQN,OACnBa,IAAKvC,EAAMwC,MACXC,IAAKzC,EAAM0C,YAEf,kBAACC,EAAA,EAAD,CAAYP,UAAWJ,EAAQF,KAAMc,QAAM,EAACxB,QAAQ,MAC/CpB,EAAMwC,OAEX,kBAACK,EAAA,EAAD,CAAMC,KAAM9C,EAAM+C,SAAUC,OAAO,SAASC,IAAI,cAAhD,cCxBb,SAASC,EAAMlD,GAClB,IAAMmD,EAAQnD,EAAMmD,MACdC,EAAQpD,EAAMoD,MACdC,EAAYrD,EAAMqD,UAExB,OAAIF,EAGI,kBAAChD,EAAA,EAAD,CAAMC,WAAS,EAACkD,UAAU,MAAMC,QAAQ,SAASjD,WAAW,UACxD,kBAAC,IAAD,CAAW8B,UAAU,eADzB,WACiDe,EAAMK,SAIpDH,EAEA,kBAACI,EAAA,EAAD,MAIH,yBAAKrB,UAAU,eACX,kBAACjC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAEhB+C,EAAMM,OAAS,EACZN,EAAMO,KAAI,SAACpD,EAAMqD,GACb,OACI,kBAAC7B,EAAD,CACI8B,IAAKtD,EAAKQ,GACVyB,MAAOjC,EAAKiC,MACZE,UAAWnC,EAAKuD,WAChBf,SAAUxC,EAAKwC,cAI3B,kBAAC5C,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI4B,UAAU,UACzB,kBAACO,EAAA,EAAD,CAAYoB,UAAU,MAAtB,sB,qBCnCzB,SAASC,EAAOhE,GACnB,OACI,gCACI,kBAACiE,EAAA,EAAD,KACI,kBAAC9D,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI4B,UAAU,UACzB,kBAACS,EAAA,EAAD,CAAMC,KAAK,kDAAkDE,OAAO,SAASZ,UAAU,eACnF,kBAAC,IAAD,CAAYA,UAAU,sBACtB,kBAACO,EAAA,EAAD,CAAYoB,UAAU,OAAO3B,UAAU,qBAAvC,kBCJxB,IAEa8B,EAAb,kDACE,WAAYlE,GAAQ,IAAD,8BACjB,cAAMA,IAEDmE,MAAQ,CACXf,MAAO,GACPC,WAAW,EACXF,MAAO,MAGT,EAAKjD,SAAW,EAAKA,SAASkE,KAAd,gBATC,EADrB,qDAaWC,GAAI,IAAD,OACVA,EAAEC,iBAEFC,KAAKC,SAAS,CACZnB,WAAW,IAGboB,MAtBQ,yCAsBIJ,EAAErB,OAAO0B,cAAc,SAASC,OACzCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKP,SAAS,CACZnB,WAAW,EACXD,MAAO2B,EAAOC,WAGlB,SAAC7B,GACC,EAAKqB,SAAS,CACZnB,WAAW,EACXF,aAILyB,KACCP,EAAErB,OAAO0B,cAAc,SAASC,MAAQ,MArChD,+BA0CI,OACE,yBAAKvC,UAAU,OACb,kBAAC6B,EAAA,EAAD,CAAWgB,SAAS,MAClB,kBAACtC,EAAA,EAAD,CAAYvB,QAAQ,KAAK8D,MAAM,UAA/B,uBAGA,kBAACnF,EAAD,CACEoF,UAAWZ,KAAKJ,MAAMgB,UACtBjF,SAAUqE,KAAKrE,YAInB,kBAAC+D,EAAA,EAAD,CAAWgB,SAAS,MAClB,kBAAC/B,EAAD,CACEE,MAAOmB,KAAKJ,MAAMf,MAClBC,UAAWkB,KAAKJ,MAAMd,UACtBF,MAAOoB,KAAKJ,MAAMhB,SAItB,kBAACa,EAAD,WA9DR,GAAyBoB,IAAMC,WCGXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlD,GACLmD,QAAQnD,MAAMA,EAAMK,c","file":"static/js/main.a78a1ad6.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nexport function Form(props) {\n    return (\n        <form onSubmit={props.getUsers}>\n            <Grid container spacing={3} alignItems=\"flex-end\">\n                <Grid item xs={12} sm={9}>\n                    <FormControl fullWidth={true}>\n                        <InputLabel htmlFor=\"my-input\">User</InputLabel>\n                        <Input \n                            id=\"my-input\" \n                            required={true} \n                            autoFocus={true} \n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={3}>\n                    <Button \n                        color=\"primary\" \n                        variant=\"contained\" \n                        type=\"submit\" \n                        size=\"large\" \n                        disableElevation\n                    >\n                        <SearchIcon/>\n                        Search\n                    </Button>\n                </Grid>\n            </Grid>\n        </form>\n        \n    )\n}","import React from 'react'\nimport { Grid, Card, CardContent, Avatar, Typography, Link, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    avatar: {\n        width: 65,\n        height: 65,\n        marginBottom: 10\n    },\n    name: {\n        marginBottom: 10\n    },\n})\n\nexport function User(props) {\n    const classes = useStyles();    \n\n    return (\n        <Grid item xs={12} md={4} lg={3}>\n            <Card className=\"users-cards__card\">\n                <CardContent className=\"user-card__content\">\n                    <Avatar\n                        className={classes.avatar} \n                        alt={props.login} \n                        src={props.avatarUrl}\n                    />\n                    <Typography className={classes.name} noWrap variant=\"h4\">\n                        {props.login}\n                    </Typography>\n                    <Link href={props.html_url} target=\"_blank\" rel=\"noreferrer\">\n                        Profile\n                    </Link>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}","import React from 'react'\nimport { Grid, LinearProgress, Typography } from '@material-ui/core'\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { User } from './User'\n\nexport function Users(props) {\n    const error = props.error;\n    const users = props.users;\n    const isLoading = props.isLoading\n\n    if (error) {\n\n        return (\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                <ErrorIcon className=\"error-icon\" /> Error: {error.message}\n            </Grid>\n        )\n\n    } else if (isLoading) {\n\n        return <LinearProgress />\n\n    } else {\n        return (\n            <div className=\"users-cards\">\n                <Grid container spacing={3}>\n                    {\n                        (users.length > 0) ?\n                            users.map((item, i) => {\n                                return (\n                                    <User\n                                        key={item.id}\n                                        login={item.login}\n                                        avatarUrl={item.avatar_url}\n                                        html_url={item.html_url}\n                                    />\n                                )\n                            }) :\n                            <Grid item xs={12} className=\"center\">\n                                <Typography component=\"h3\">\n                                    Users not found\n                                </Typography>\n                            </Grid>\n                    }\n                </Grid>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Container, Grid, Link, Typography } from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nexport function Footer(props) {\n    return (\n        <footer>\n            <Container>\n                <Grid item xs={12} className=\"center\">\n                    <Link href=\"https://github.com/atomr-web/react-github-users\" target=\"_blank\" className=\"github-link\">\n                        <GitHubIcon className=\"github-link__icon\" />\n                        <Typography component=\"span\" className=\"github-link__name\">\n                            Repository\n                        </Typography>\n                    </Link>\n                </Grid>\n            </Container>\n        </footer>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { Container, Typography } from '@material-ui/core';\nimport { Form } from './components/Form'\nimport { Users } from './components/Users'\nimport { Footer } from './components/Footer'\n\nconst url = 'https://api.github.com/search/users?q=';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      users: [],\n      isLoading: false,\n      error: null\n    }\n\n    this.getUsers = this.getUsers.bind(this);\n  }\n\n  getUsers(e) {\n    e.preventDefault();\n\n    this.setState({\n      isLoading: true\n    })\n\n    fetch(url + e.target.querySelector('input').value)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoading: false,\n            users: result.items,\n          })\n        },\n        (error) => {\n          this.setState({\n            isLoading: true,\n            error\n          })\n        }\n      )\n      .then(\n        e.target.querySelector('input').value = ''\n      )\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"h4\" align=\"center\">\n            Search github users\n            </Typography>\n          <Form\n            inputText={this.state.inputText}\n            getUsers={this.getUsers}\n          />\n        </Container>\n\n        <Container maxWidth=\"lg\">\n          <Users\n            users={this.state.users}\n            isLoading={this.state.isLoading}\n            error={this.state.error}\n          />\n        </Container>\n\n        <Footer />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}